##########
#
# 11.1
#
##########

CREATE OR REPLACE FUNCTION masaPudelka(in arg1 CHARACTER(4))
RETURNS INTEGER AS
$$
DECLARE 
    wynik INTEGER;
BEGIN
    SELECT SUM(c.masa*z.sztuk) INTO wynik
    FROM
        pudelka p
        JOIN zawartosc z USING (idpudelka)
        JOIN czekoladki c USING (idczekoladki)
    WHERE p.idpudelka = arg1;

    RETURN wynik;
END;
$$ LANGUAGE PLpgSQL;

SELECT masaPudelka('alls');

----------------------

CREATE OR REPLACE FUNCTION liczbaCzekoladek(in arg1 CHARACTER(4))
RETURNS INTEGER AS
$$
DECLARE 
    wynik INTEGER;
BEGIN
    SELECT SUM(z.sztuk) INTO wynik
    FROM
        pudelka p
        JOIN zawartosc z USING (idpudelka)
    WHERE p.idpudelka = arg1;

    RETURN wynik;
END;
$$ LANGUAGE PLpgSQL;

SELECT liczbaCzekoladek('alls');

##########
#
# 11.2
#
##########

CREATE OR REPLACE FUNCTION zysk(in arg1 CHARACTER(4))
RETURNS NUMERIC(10,2) AS
$$
DECLARE 
    wynik NUMERIC(10,2);
BEGIN
    SELECT cena - 0.9 - SUM(c.koszt*z.sztuk) INTO wynik
    FROM
        pudelka p
        JOIN zawartosc z USING (idpudelka)
        JOIN czekoladki c USING (idczekoladki)
    WHERE p.idpudelka = arg1 GROUP BY idpudelka, cena;

    RETURN wynik;
END;
$$ LANGUAGE PLpgSQL;

SELECT zysk('alls');

----------------------

SELECT SUM(zysk(a.idpudelka)*a.sztuk)
FROM
    zamowienia z
    NATURAL JOIN artykuly a
WHERE
    z.datarealizacji >= '2013-11-11'
    AND z.datarealizacji <= '2013-11-17'

##########
#
# 11.3
#
##########

CREATE OR REPLACE FUNCTION sumaZamowien(in arg1 INTEGER)
RETURNS INTEGER AS
$$
DECLARE 
    wynik INTEGER;
BEGIN
    SELECT SUM(a.sztuk*p.cena) INTO wynik
    FROM
        zamowienia z
        NATURAL JOIN artykuly a
        NATURAL JOIN pudelka p
    WHERE z.idklienta = arg1;

    RETURN wynik;
END;
$$ LANGUAGE PLpgSQL;

SELECT sumaZamowien(1);

----------------------

CREATE OR REPLACE FUNCTION rabat(in arg1 INTEGER)
RETURNS INTEGER AS
$$
DECLARE wynik INTEGER;
DECLARE wartoscZamowien INTEGER;
BEGIN
    SELECT SUM(a.sztuk*p.cena) INTO wartoscZamowien
    FROM
        zamowienia z
        NATURAL JOIN artykuly a
        NATURAL JOIN pudelka p
    WHERE z.idklienta = arg1;

    IF wartoscZamowien BETWEEN 101 AND 200 THEN
        wynik := 4;
    ELSIF wartoscZamowien BETWEEN 201 AND 400 THEN
        wynik := 7;
    ELSIF wartoscZamowien > 400 THEN
        wynik := 8;
    ELSE
        wynik := 0;
    END IF;

    RETURN wynik;
END;
$$ LANGUAGE PLpgSQL;

SELECT rabat(1);

##########
#
# 11.4
#
##########

CREATE OR REPLACE FUNCTION podwyzka()
RETURNS void AS
$$
DECLARE zmiana NUMERIC(7,2);
DECLARE c1 RECORD;
DECLARE c2 RECORD;
BEGIN
    FOR c1 IN SELECT * FROM czekoladki LOOP

        zmiana := case
                  when c1.koszt < 0.20 then 0.03
                  when c1.koszt between 0.20 and 0.29 then 0.04
                  else 0.05 end;

        UPDATE czekoladki
        SET koszt = koszt+zmiana WHERE idczekoladki = c1.idczekoladki;

        FOR c2 IN SELECT * FROM zawartosc WHERE idczekoladki = c1.idczekoladki LOOP

            UPDATE pudelka SET cena = cena + (zmiana*c2.sztuk) WHERE idpudelka = c2.idpudelka;

        END LOOP;

    END LOOP;
END;
$$ LANGUAGE PLpgSQL;

SELECT podwyzka();

##########
#
# 11.7
#
##########

CREATE OR REPLACE FUNCTION kwiaciarnia.rabat(in arg1 VARCHAR(10))
RETURNS INTEGER AS
$$
DECLARE wynik INTEGER;
DECLARE wartoscZamowien INTEGER;
DECLARE wartoscHistorii INTEGER;
DECLARE wartoscSuma INTEGER;
BEGIN
    SELECT SUM(cena) INTO wartoscZamowien
    FROM
        kwiaciarnia.zamowienia
    WHERE idklienta = arg1;

    SELECT SUM(cena) INTO wartoscHistorii
    FROM
        kwiaciarnia.historia
    WHERE idklienta = arg1 AND termin > CURRENT_DATE - interval '7 days';

    wartoscSuma := wartoscZamowien + wartoscHistorii;

    IF wartoscZamowien BETWEEN 1 AND 100 THEN
        wynik := 5;
    ELSIF wartoscZamowien BETWEEN 101 AND 400 THEN
        wynik := 10;
    ELSIF wartoscZamowien BETWEEN 401 AND 700 THEN
        wynik := 15;
    ELSIF wartoscZamowien > 700 THEN
        wynik := 20;
    ELSE
        wynik := 0;
    END IF;

    RETURN wynik;
END;
$$ LANGUAGE PLpgSQL;

SELECT kwiaciarnia.rabat('msowins');

